# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI

on:
  push:
    branches: [ "savannah/feature/14" ]
  pull_request:
    branches: [ "savannah/feature/14" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: | 
              ~/.gradle/caches
              ~/.gradle/wrapper
          key: ${{runner.os}}-gradle-${{hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys:
            ${{runner.os}}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: make application.yml
        run:
          mkdir ./src/main/resources |
          touch ./src/main/resources/application.yml
        shell: bash

      - name: deliver application.yml
        run: echo "${{secrets.APPLICATION}}" > ./src/main/resources/application.yml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        
      - name: Test with Gradle
        run: ./gradlew --info test

      # Object Storage에 업로드할 파일만 모을 server 디렉터리 생성
      - name: make server directory
        run:  mkdir -p server

      # 1. Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./server

      # 3. script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./server

      # 파일 압축
      - name: Make zip file and move to server directory
        run: zip -r ./wontu-webserver.zip ./server

      # S3에 업로드
      - name: upload build file to NCP Object Storage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws --endpoint-url=https://kr.object.ncloudstorage.com \
          s3 cp ./wontu-webserver.zip \
          --region ap-northeast-2 \
          s3://wontu-object-storage-bucket

      - name: make timestamp
        id: extract_timestamp
        run: |
          echo "TIMESTAMP=$(($(date +%s%N)/1000000))" >> $GITHUB_OUTPUT
          
      - name: make MESSAGE
        id: extract_message
        run: |
          echo "TIMESTAMP="${{ steps.extract_timestamp.outputs.TIMESTAMP }}
          METHOD="GET"
          URI="https://sourcedeploy.apigw.ntruss.com/api/v1/project?projectName=wontu-code-deploy&pageSize=1&pageNo=1"
          
          nl=$'\\n'
          message="$METHOD"' '"$URI"${nl}
          message+="${{ steps.extract_timestamp.outputs.TIMESTAMP }}"${nl}
          message+="${{ secrets.NCP_ACCESS_KEY_ID_DEPLOY }}"
          echo "MESSAGE=$message" >> $GITHUB_OUTPUT
          
      - name: make signature ver1
        id: extract_signature
        run: |
          echo -n -e "MESSAGE="${{ steps.extract_message.outputs.MESSAGE }}
          signature=$(echo -n -e "${{ steps.extract_message.outputs.MESSAGE }}"|iconv -t utf8 |openssl dgst -sha256 -hmac ${{ secrets.NCP_SECRET_ACCESS_KEY_DEPLOY }} -binary|openssl enc -base64)
          echo "SIGNATURE=$signature" >> $GITHUB_OUTPUT
          
      - name: make signature ver2
        id: extract_signature2
        run: |
          message="GET https://sourcedeploy.apigw.ntruss.com/api/v1/project"$'\n'${{ steps.extract_timestamp.outputs.TIMESTAMP }}$'\n'${{ secrets.NCP_ACCESS_KEY_ID_DEPLOY }}
          echo -n -e "message="$message
          signature=$(echo -n -e "$message"|iconv -t utf8 |openssl dgst -sha256 -hmac ${{ secrets.NCP_SECRET_ACCESS_KEY_DEPLOY }} -binary|openssl enc -base64)
          echo "SIGNATURE2=$signature" >> $GITHUB_OUTPUT
          
      - name: make signature (hard coding)
        id: extract_signature_hardCoding
        run: |
          nl=$'\\n'
      
          TIMESTAMP=${{ steps.extract_timestamp.outputs.TIMESTAMP }}
          echo "TIMESTAMP="${{ steps.extract_timestamp.outputs.TIMESTAMP }}
          ACCESSKEY="A401F1FB117891E8BD14"				# access key id (from portal or Sub Account)
          SECRETKEY="D68F83480BB50A42B678B74EBEBAE7E72029135C"				# secret key (from portal or Sub Account)
      
          METHOD="GET"
          URI="https://sourcedeploy.apigw.ntruss.com/api/v1/project"
      
          SIG="$METHOD"' '"$URI"${nl}
          SIG+="$TIMESTAMP"${nl}
          SIG+="$ACCESSKEY"
      
          signature=$(echo -n -e "$SIG"|iconv -t utf8 |openssl dgst -sha256 -hmac $SECRETKEY -binary|openssl enc -base64)
          echo "SIGNATURE_h=$signature" >> $GITHUB_OUTPUT
          
      - name: request deploy
        run: |
          echo "SIGNATURE "${{ steps.extract_signature.outputs.SIGNATURE }}
          echo "SIGNATURE2  "${{ steps.extract_signature2.outputs.SIGNATURE2 }}
          echo "SIGNATURE_h "${{ steps.extract_signature_hardCoding.outputs.SIGNATURE_h }}
          echo
          echo
          echo "SIGNATURE"
          curl -i -X GET \
          -H "x-ncp-apigw-timestamp:${{ steps.extract_timestamp.outputs.TIMESTAMP }}" \
          -H "x-ncp-iam-access-key:${{ secrets.NCP_ACCESS_KEY_ID_DEPLOY }}" \
          -H "x-ncp-apigw-signature-v2:${{ steps.extract_signature.outputs.SIGNATURE}}" \
          'https://sourcedeploy.apigw.ntruss.com/api/v1/project'
          echo
          echo
          echo "SIGNATURE2"
          curl -i -X GET \
          -H "x-ncp-apigw-timestamp:${{ steps.extract_timestamp.outputs.TIMESTAMP }}" \
          -H "x-ncp-iam-access-key:${{ secrets.NCP_ACCESS_KEY_ID_DEPLOY }}" \
          -H "x-ncp-apigw-signature-v2:${{ steps.extract_signature2.outputs.SIGNATURE2}}" \
          'https://sourcedeploy.apigw.ntruss.com/api/v1/project'
          echo
          echo
          echo "SIGNATURE_h"
          curl -i -X GET \
          -H "x-ncp-apigw-timestamp:${{ steps.extract_timestamp.outputs.TIMESTAMP }}" \
          -H "x-ncp-iam-access-key:${{ secrets.NCP_ACCESS_KEY_ID_DEPLOY }}" \
          -H "x-ncp-apigw-signature-v2:${{ steps.extract_signature_hardCoding.outputs.SIGNATURE_h}}" \
          'https://sourcedeploy.apigw.ntruss.com/api/v1/project'
          echo
          echo
          echo "SIGNATURE_example"
          curl -i -X GET \
          -H "x-ncp-apigw-timestamp:${{ steps.extract_timestamp.outputs.TIMESTAMP }}" \
          -H "x-ncp-iam-access-key:D78BB444D6D3C84CA38D" \
          -H "x-ncp-apigw-signature-v2:WTPItrmMIfLUk/UyUIyoQbA/z5hq9o3G8eQMolUzTEa=" \
          'https://sourcedeploy.apigw.ntruss.com/api/v1/project'
